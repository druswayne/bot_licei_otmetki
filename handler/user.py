import json

import requests
from aiogram import Bot, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from keys.key import kb_soglas, kb_choice
from loader import router, cursor, con


class Form_name(StatesGroup):
    choice = State()
    token = State()


def req(zapros, data):
    zapros = json.dumps(zapros)
    data = json.dumps(data)
    url = f'https://druswayne.pythonanywhere.com/get_data_db/?request={zapros}&data={data}'
    data = requests.get(url)
    data_decode = json.loads(data.content)

    return data_decode


@router.message(Command('start'))
async def reg(message: Message, bot: Bot, state: FSMContext) -> None:
    # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    # https://t.me/collab_bot?start=–∫–µ–µ–∫–µ–∫–µ–µ–∫
    token = message.text.split()[-1].split('_')[-1]
    user_id = message.chat.id

    data = req("SELECT * FROM users WHERE id=(?)", [user_id])
    if len(data) != 0:
        builder = ReplyKeyboardBuilder()
        for button in kb_choice:
            builder.add(button)
        builder.adjust(1)
        await message.answer(text='ü§ì', reply_markup=builder.as_markup(resize_keyboard=True))
    else:
        if token == '/start':
            await message.answer(text='–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
            return

        name = req("SELECT name FROM users WHERE token=(?)", [token])[0][0]
        builder = ReplyKeyboardBuilder()
        for button in kb_soglas:
            builder.add(button)
        builder.adjust(1)
        await state.set_state(Form_name.token)
        await state.update_data(token=token)
        await state.set_state(Form_name.choice)
        await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç!\n{name} ‚Äì —ç—Ç–æ —Ç—ã?',
                             reply_markup=builder.as_markup(resize_keyboard=True))


"""–±—É–¥–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ –≤ –±–¥, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –∏–º—è —Ç–æ–∫–µ–Ω id
    –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ –≤–æ–ø—Ä–æ—Å "—Ç—ã –≤–∞—Å—è –ø—É–ø–∫–∏–Ω?
    –ï—Å–ª–∏ –¥–∞, –≤ –±–¥ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è id –≤ —Ç–∞–±–ª–∏—Ü—É —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –∏–º–µ–Ω–µ–º.
    —Ç.–µ. –∞–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    –¥–∞–ª—å—à–µ –∫–Ω–æ–ø–∫–∞ "—É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –æ—Ç–º–µ—Ç–∫–∏"
    """


@router.message(Form_name.choice)
async def choice(message: Message, bot, state: FSMContext):
    await state.update_data(choice=message.text)
    data_date = await state.get_data()
    choice = data_date['choice']
    token = data_date['token']
    await state.clear()
    if choice == "–î–∞, —ç—Ç–æ —è":
        req('UPDATE users SET id=(?) WHERE token=(?)', [message.chat.id, token])

        builder = ReplyKeyboardBuilder()
        for button in kb_choice:
            builder.add(button)
        builder.adjust(1)
        await message.answer(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
                             reply_markup=builder.as_markup(resize_keyboard=True))
    else:
        await message.answer('–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –∑–∞–Ω–æ–≤–æ', reply_markup=types.ReplyKeyboardRemove())

@router.message(Command('stats'))
@router.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ç–º–µ—Ç–∫–∏')
async def get_stats(message: Message):
    user_id = message.chat.id
    data = req("SELECT * FROM users WHERE id=(?)", [user_id])
    if len(data) == 0:
        await message.answer('–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        return
    id_user = message.chat.id

    data = req('SELECT klass from users WHERE id=(?)', [id_user])
    if not len(data):
        await message.answer(text='–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!')
        return
    klass = data[0][0]

    name = req('SELECT name from users WHERE id=(?)', [id_user])[0][0]
    url = f'https://druswayne.pythonanywhere.com/get_stats/?klass={klass}&name={name}'
    data = json.loads(requests.get(url).content)

    text = ''
    for i in data:
        text += f'{i}, '
    text = text[:-2]
    await message.answer(f'–¢–≤–æ–∏ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ: {text}')

@router.message(Command('delete'))
async def del_user(message: Message):
    id_user = message.chat.id
    data = req('SELECT klass from users WHERE id=(?)', [id_user])
    if not len(data):
        await message.answer(text='–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∂—É—Ä–Ω–∞–ª—É!')
        return
    req("UPDATE users SET id=NULL WHERE id=(?)", [id_user])
    await message.answer(text='–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –∂—É—Ä–Ω–∞–ª–∞!')